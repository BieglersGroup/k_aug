CC = gcc
CCFLAGS = -g -pg -Wall -ansi -pedantic-errors
FC = gfortran
S = ../..
L = -lm -ldl
A = $S/ASL/solvers/amplsolver.a
PARENT = ..
ONAME = k_matrix


all1 = k_matrix_openblas
MATRIXDIR = ../matrix
LMATRIX = kassemble.f

MC30ROOT = /home/dav0/Apps/mc30-1.0.0/build/src/


PARDISOROOT = /usr/local/lib/


OPENBLASROOT = /home/dav0/Apps/OpenBLAS/


LMKLIB= -L${MKLROOT}/lib/intel64 -Wl,--no-as-needed -lmkl_intel_lp64 -lmkl_sequential -lmkl_core -lpthread -lm -ldl   -m64 -I${MKLROOT}/include
LIBPARDISO = -L${PARDISOROOT} -lpardiso500-GNU481-X86-64 -lgfortran -fopenmp -lpthread -lm
# example LIBOPENBLAS= -L${OPENBLASROOT} -lopenblas_haswellp-r0.2.20.dev
LIBOPENBLAS= -L${OPENBLASROOT} -lopenblas_haswellp-r0.2.20.dev

LIBMC30 = ${MC30ROOT}libmc30.a -lgfortran -lm -lquadmath
KMATRIX = iteration1_main.c



k_matrix_mkl_rh:  w_append_nz k_assemble kmalloc mc30_dri pard_dri \
      get_jac_asl get_hess_asl find_ineq get_grad_f assemble_corrector_rhs assemble_rhsds_rh \
      sens_update_driver suffix_decl_hand
	$(CC) $(CCFLAGS) iteration1_main_hess_aug.c -o k_rh  $A $L \
	-I$S/ASL/solvers/ \
	 w_append_nz.o k_assemble_cc.o kmalloc.o mc30_driver.o  \
	get_jac_asl_aug.o get_hess_asl_aug.o find_inequalities.o get_grad_f.o \
	assemble_corrector_rhs.o assemble_rhsd_red_hess.o pardiso_driver.o sens_update_driver.o \
	suffix_decl_hand.o \
	-I$(S)/HSL/ -I$(S)/Pardiso/ -I$(S)/matrix/ -I$(PARENT) \
	$(LIBPARDISO) $(LIBMC30) $(LMKLIB)


test:  w_append_nz k_assemble kmalloc mc30_dri  \
    get_jac_asl get_hess_asl find_ineq get_grad_f assemble_corrector_rhs assemble_rhsds_rh \
    sens_update_driver suffix_decl_hand
	$(CC) $(CCFLAGS) iteration1_main_hess_aug.c -o k_rh  $A $L \
	-I$S/ASL/solvers/ \
	 w_append_nz.o k_assemble_cc.o kmalloc.o mc30_driver.o  \
	get_jac_asl_aug.o get_hess_asl_aug.o find_inequalities.o get_grad_f.o \
	assemble_corrector_rhs.o assemble_rhsd_red_hess.o sens_update_driver.o \
	suffix_decl_hand.o \
	-I$(S)/HSL/ -I$(S)/matrix/ -I$(PARENT) \
	$(LIBMC30) $(LIBOPENBLAS)

test_br:  w_append_nz k_assemble kmalloc mc30_dri pard_dri \
      get_jac_asl get_hess_asl find_ineq get_grad_f assemble_corrector_rhs assemble_rhsds_rh \
      sens_update_driver suffix_decl_hand csr_driver
	$(CC) $(CCFLAGS) iteration1_main_kkt_brow.c -o k_rh  $A $L \
	-I$S/ASL/solvers/ \
	 w_append_nz.o k_assemble_cc.o kmalloc.o mc30_driver.o  \
	get_jac_asl_aug.o get_hess_asl_aug.o find_inequalities.o get_grad_f.o \
	assemble_corrector_rhs.o assemble_rhsd_red_hess.o pardiso_driver.o sens_update_driver.o \
	suffix_decl_hand.o csr_driver.o \
	-I$(S)/HSL/ -I$(S)/Pardiso/ -I$(S)/matrix/ -I$(PARENT) \
	$(LIBPARDISO) $(LIBMC30) $(LMKLIB)

test_br_wo_pard:  w_append_nz k_assemble kmalloc mc30_dri \
      get_jac_asl get_hess_asl find_ineq get_grad_f assemble_corrector_rhs assemble_rhsds_rh \
      suffix_decl_hand csr_driver
	$(CC) $(CCFLAGS) iteration1_main_kkt_brow.c -o k_rh  $A $L \
	-I$S/ASL/solvers/ \
	 w_append_nz.o k_assemble_cc.o kmalloc.o mc30_driver.o  \
	get_jac_asl_aug.o get_hess_asl_aug.o find_inequalities.o get_grad_f.o \
	assemble_corrector_rhs.o assemble_rhsd_red_hess.o  \
	suffix_decl_hand.o csr_driver.o \
	-I$(S)/HSL/ -I$(S)/Pardiso/ -I$(S)/matrix/ -I$(PARENT) \
	 $(LIBMC30)



clean:
	rm -rf $(all) *.o
sort_by_column:
	$(CC) $(CCFLAGS) -c $(PARENT)/sort_by_column.c -I$S/ASL/solvers/
w_append_nz: 
	$(CC) $(CCFLAGS) -c $(PARENT)/w_append_nz.c -I$S/ASL/solvers/
k_assemble:
	$(CC) $(CCFLAGS) -c $(PARENT)/k_assemble_cc.c -I$S/ASL/solvers/ $L
kmalloc:
	$(CC) $(CCFLAGS) -c $(PARENT)/kmalloc.c -I$S/ASL/solvers/
      
mc30_dri:
	$(CC) $(CCFLAGS) -c $(S)/HSL/mc30_driver.c -I$(S)/HSL/ -I$S/ASL/solvers/

pard_dri:
	$(CC) $(CCFLAGS) -c $(S)/Pardiso/pardiso_driver.c -I$(S)/ASL/solvers/ 


get_jac_asl:
	$(CC) $(CCFLAGS) -c get_jac_asl_aug.c -I$S/ASL/solvers/

get_hess_asl:
	$(CC) $(CCFLAGS) -c get_hess_asl_aug.c -I$S/ASL/solvers/

find_ineq:
	$(CC) $(CCFLAGS) -c $(PARENT)/find_inequalities.c -I$S/ASL/solvers/


get_grad_f:
	$(CC) $(CCFLAGS) -c $(PARENT)/get_grad_f.c -I$S/ASL/solvers/

assemble_corrector_rhs:
	$(CC) $(CCFLAGS) -c $(PARENT)/assemble_corrector_rhs.c -I$S/ASL/solvers/
#assemble_rhsds:
#	$(CC) $(CCFLAGS) -c assemble_rhsds.c -o assemble_rhsds.o -I$(S)/ASL/solvers/
#assemble_rhsds_v2:
#	$(CC) $(CCFLAGS) -c assemble_rhsdsv2.c -o assemble_rhsds.o -I$(S)/ASL/solvers/
assemble_rhsds_v3:
	$(CC) $(CCFLAGS) -c $(PARENT)/assemble_rhsdsv3.c -o assemble_rhsds.o -I$(S)/ASL/solvers/
sens_update_driver:
	$(CC) $(CCFLAGS) -c $(S)/matrix/sens_update_driver.c -I$S/ASL/solvers/
assemble_rhsds_rh:
	$(CC) $(CCFLAGS) -c $(PARENT)/assemble_rhsd_red_hess.c -I$(S)/ASL/solvers/
suffix_decl_hand:
	$(CC) $(CCFLAGS) -c suffix_decl_hand.c -I$(S)/ASL/solvers/

csr_driver:
	$(CC) $(CCFLAGS) -c csr_driver.c -I$(S)/ASL/solvers/